;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(input-method-history query-replace-history helm-file-name-history tmphist helm-M-x-input-history woman-topic-history command-history read-expression-history shell-command-history org-read-date-history evil-ex-history buffer-name-history minibuffer-history file-name-history extended-command-history))
(setq query-replace-history '("\\begin{equation}" "\\[" "\\end{equation}" "\\]" "\\begin{equation}" "\\["))
(setq helm-file-name-history '("paddle_code.org" "init.el" "paddle_code.tex" "mt.org" "paddle.org" "plan.org" "model_status.org" "2015-12-09-rnn.org" "rnn.org" "2015-12-22-rnn1.org" "2015-12-09-rnn.html" "model.html" "badcase.org" "model_status.org" "dataset.org" "emacs.org" "path_resource.org" "2015-12-12-bloom-filter.org" "2015-12-12-bloom-filter.html" "common.css" "TSDGLBloom.frag" "encoder-decoder.org" "index.org" "mt.org" "tools_and_paths.org" "knowledge.org" "index.org" "about.org" "init.el" "init.el" "case_20151130_314_pc_final.txt.d1cs.txt" "monitor.html" "fig_train_test_cost.html" "shell.org" "explore.org" ".emacs~" "chelm.el" "README.org" "evil.el" "init.el" "init"))
(setq helm-M-x-input-history '("ins" "load-fi" "ins" "to" "tog" "inse" "ins" "insert-" "tog" "togg" "publi" "to" "togg" "pub" "publi" "publ" "publish" "publi" "to" "ins" "publi" "publ" "pub" "publi" "pub" "publi" "pub" "insert" "publish" "publi" "publ" "publi" "publ" "publis" "publi" "publ" "publi" "publ" "pub" "publi" "to" "packa" "package-install" "ins" "insert" #("|" 0 1 (fontified t line-prefix #("***** " 0 5 (face org-indent)) wrap-prefix #("***** " 0 6 (face org-indent)) face org-table)) "ins" "org-mo" "or" "org-inde" "insert cur" "publi" "pub" "publi" "publ" "tog" "publi" "publish" "publi" "pub" "pu" "publ" "publi" "ub" "publi" "term" "publi" "to" "pub" #("公式" 0 2 (face org-block font-lock-fontified t wrap-prefix #("*** " 0 4 (face org-indent)) line-prefix #("*** " 0 3 (face org-indent)) fontified t)) "pub" #("4" 0 1 (wrap-prefix #("*** " 0 4 (face org-indent)) line-prefix #("*** " 0 3 (face org-indent)) fontified t)) "pu" "publish" "pack" "package-install" "load-fi" "iima" "iim" "ins date" "insert curr" "pub" "tog" "pub" "publi " #("equation" 0 8 (fontified t line-prefix #("* " 0 1 (face org-indent)) wrap-prefix #("* " 0 2 (face org-indent)))) "export" "re" "repla" "pu" "publ" "pub" "publi" "iim" "pub" "toggle-tr" "toggle-tru" "iim" "publi" "org-inde"))
(setq command-history '((evil-change 3581 3589 'exclusive nil nil) (evil-change 3587 3589 'exclusive nil nil) (evil-change 3500 3508 'exclusive nil nil) (evil-change 3419 3427 'exclusive nil nil) (evil-delete 10780 10781 'line nil nil) (evil-change 10401 10403 'exclusive nil nil) (evil-delete 10619 10773 'line nil nil) (evil-change 10242 10244 'exclusive nil nil) (insert-current-date) (helm-M-x nil "insert-current-date") (load-file "/Users/baidu/.emacs.d/personal/init.el") (helm-M-x nil "load-file") (evil-change 5600 5604 'exclusive nil nil) (insert-current-date) (helm-M-x nil "insert-current-date") (insert-current-date) (helm-M-x nil "insert-current-date") (insert-current-date) (helm-M-x nil "insert-current-date") (evil-change 9205 9207 'exclusive nil nil) (evil-set-marker 115) (evil-delete 245 260 'line nil nil) (toggle-truncate-lines nil) (helm-M-x nil "toggle-truncate-lines") (toggle-truncate-lines nil) (helm-M-x nil "toggle-truncate-lines") (evil-set-marker 115) (evil-set-marker 115) (evil-delete 151 152 'line nil nil) (evil-delete 4565 4566 'line nil nil) (evil-delete 420 423 'line nil nil) (evil-delete 3939 3941 'line nil nil) (evil-delete 3602 3603 'line nil nil) (evil-delete 1681 1682 'line nil nil) (evil-delete 1445 1446 'line nil nil) (evil-delete 1243 1253 'line nil nil) (evil-delete 1259 1260 'line nil nil) (evil-delete 1025 1030 'exclusive nil nil) (evil-delete 1025 1033 'exclusive nil nil) (evil-delete 1024 1025 'exclusive nil nil) (evil-delete 1079 1080 'line nil nil) (evil-change 1079 1112 'line nil nil) (evil-delete 891 897 'line nil nil) (evil-delete 907 908 'line nil nil) (evil-delete 907 914 'line nil nil) (evil-delete 373 374 'line nil nil) (evil-set-marker 115) (evil-set-marker 115) (evil-delete 135 136 'line nil nil) (evil-set-marker 115) (evil-set-marker 115) (evil-delete 135 136 'line nil nil) (evil-delete 188 197 'line nil nil) (evil-delete 1599 1600 'line nil nil) (evil-find-char nil 24) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 107) (evil-set-marker 115) (evil-delete 1285 1288 'line nil nil) (evil-replace 17 17 'exclusive 97) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 115) (evil-delete 1198 1199 'line nil nil) (evil-delete 1198 1199 'line nil nil) (evil-delete 1198 1199 'line nil nil) (evil-delete 763 764 'line nil nil) (evil-set-marker 115) (evil-set-marker 115) (evil-change 801 803 'exclusive nil nil) (evil-delete 584 586 'line nil nil) (evil-delete 552 557 'line nil nil) (evil-delete 59 98 'line nil nil) (evil-delete 59 69 'line nil nil) (evil-delete 59 141 'line nil nil) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 106) (evil-set-marker 115) (evil-set-marker 115) (evil-set-marker 115) (evil-delete 639 639 'exclusive nil nil) (evil-delete 639 640 'line nil nil) (evil-delete 639 640 'line nil nil) (evil-delete 639 640 'line nil nil) (evil-set-marker 115) (toggle-truncate-lines nil) (helm-M-x nil "toggle-truncate-lines") (evil-change 286 288 'exclusive nil nil) (evil-delete 299 304 'line nil nil) (evil-delete 299 313 'line nil nil) (evil-delete 283 303 'line nil nil) (evil-use-register 58) (evil-set-marker 115) (evil-set-marker 115) (evil-delete 85 86 'line nil nil)))
(setq read-expression-history '("q"))
(setq shell-command-history '("date"))
(setq org-read-date-history '("   "))
(setq evil-ex-history '(#("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("e Argument.h" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("e Layer.h" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("e ~/project/code2pdf/coderead/gserver/Argument.h" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("ew" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("Q" 0 1 (ex-index 1)) #("W" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("Ow" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("w:w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e plan.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("q" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("we" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("e mt.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8)) #("w" 0 1 (ex-index 1)) #("e ~/project/ad_mt/docs/model_status.orgj" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/personal/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("w fig_latest_train_costs.html" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29)) #("w" 0 1 (ex-index 1)) #("e fig_train_test_cost.html" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26)) #("w" 0 1 (ex-index 1))))
(setq buffer-name-history '("model_sta" "*Buffer List*" "*terminal*" "paddle.org" "mt.org" "mt.org" "init.el" "init.el" "mt.org" "emacs.org" "evil.el" "mt.org" "init.el"))
(setq minibuffer-history '("paddle_co" "init" "/Users/baidu/org" "m" "model" #("HANG" 0 4 (fontified t face font-lock-string-face)) "/Users/baidu/.emacs.d/personal/" "init" "m" "/Users/baidu/project/ad_mt/docs/model_status.org" "/Users/baidu/OneDrive/Documents/orgn" "model" "Lay " "Argu" "codere " "cod " "/Users/baidu/OneDrive/Documents/orgnotes/paddle_co" "/Users/baidu/project/code2pdf/coderead/gserver/Recu" "/Users/baidu/proje" "/Users/baidu/" "pad" "init" "paddle code org" "init" "mess" "paddle code org " "init" "mess" "paddle org" "paddle" "init" "mess" "paddle_co" "init" "/Users/baidu/OneDrive/Documents/orgnotes/paddle_co" "model_s" "mt.org" "paddle.org" "paddle_co" "paddle" "/Users/baidu/OneDrive/Documents/orgnotes/paddle_code.org" "/Users/baidu/OneDrive/Documents/orgnotes/pla" "paddle" "paddle.org" "monitor" "/Users/baidu/project/ad_mt/docs/model" "/Users/baidu/org/notes/rnn" "rnn" "/Users/baidu/OneDrive/Documents/orgnotes/mt.or" "/Users/baidu/OneDrive/Documents/bai" "mt.org" "model_s" "paddle" "init" "rnn.org" "me" "rnn.org" "produced" "rnn.org" "init" "rnn.org" "init" #("presentation" 0 12 (face font-lock-string-face fontified t)) "init" "rnn." "init" "rnn.org" "init" "/Users/baidu/org/beamer/" "/Users/baidu/.emacs.d/personal/ini" "/Users/baidu/org/beamer/rnn.org" "/Users/baidu/org/notes/20" "rnn2" "model_s" "/Users/baidu/org/notes/rnn2.org" "blog" "rnn" "/Users/baidu/project/ad_mt/docs/model" "model" "paddle.org" "/Users/baidu/project" "monitor" "/Users/baidu/project/ad_mt/docs/model" "model" "/Users/baidu/OneDrive/Documents/orgnotes/eigen.org" "paddle.org" "paddle" "model_s" "monitor" "/Users/baidu/project/ad_mt/docs/model_sta" "monitor" "/Users/baidu/project/ad_mt/docs/python_vs_paddle.org" "pid省份编号对照表" "/Users/baidu/OneDrive/Documents/orgnotes/bad" "mt.or" "blog" "" "blog" "rnn" "/Users/baidu/OneDrive/Documents/orgnotes/plan"))
(setq file-name-history '("~/orgnotes/paddle_code.org" "~/.emacs.d/personal/init.el" "~/project/ad_mt/docs/model_status.org" "~/project/ad_mt/tools/paddle_analysis/monitor/templates/model.html" "~/OneDrive/Documents/orgnotes/paddle_code.org" "~/project/code2pdf/coderead/gserver/RecurrentGradientMachine.h" "~/OneDrive/Documents/orgnotes/paddle_code.tex" "~/OneDrive/Documents/orgnotes/mt.org" "~/OneDrive/Documents/orgnotes/paddle.org" "~/OneDrive/Documents/orgnotes/plan.org" "~/org/notes/2015-12-09-rnn.org" "~/org/beamer/rnn.org" "~/org/notes/2015-12-22-rnn1.org" "~/org/superjom.github.io/2015-12-09-rnn.html" "~/OneDrive/Documents/orgnotes/badcase.org" "~/OneDrive/Documents/orgnotes/model_status.org" "~/OneDrive/Documents/orgnotes/dataset.org" "~/OneDrive/Documents/orgnotes/emacs.org" "~/project/ad_mt/docs/path_resource.org" "~/org/notes/2015-12-12-bloom-filter.org" "~/org/public_html/2015-12-12-bloom-filter.html" "~/org/notes/static/common.css" "/Applications/iBooks.app/Contents/Frameworks/TSReading.framework/Versions/A/Resources/TSDGLBloom.frag" "~/Onedrive/Documents/blog/rnn/encoder-decoder.org" "~/project/blogposts/index.org" "mt.org" "~/OneDrive/Documents/orgnotes/tools_and_paths.org" "~/project/ad_mt/docs/knowledge.org" "~/Onedrive/Documents/blog/index.org" "~/OneDrive/Documents/blog/about.org" "~/project/chun-emacs.d/personal/init.el" "~/project/chun-emacs.d/init.el" "~/Documents/cases/case_20151130_314_pc_final.txt.d1cs.txt" "~/project/ad_mt/tools/paddle_analysis/monitor/templates/monitor.html" "~/project/ad_mt/tools/paddle_analysis/monitor/templates/fig_train_test_cost.html" "~/OneDrive/Documents/orgnotes/shell.org" "~/OneDrive/Documents/orgnotes/explore.org" "~/.emacs~" "~/.emacs.d/personal/chelm.el" "~/.emacs.d/README.org" "~/.emacs.d/personal/evil.el" "~/.emacs.d/init.el" "~/.emacs.d/personal/init"))
(setq extended-command-history '("insert-current-date" "load-file" "toggle-truncate-lines" "org-publish-project" "org-mode" "org-indent-mode" "term" "package-list-packages" "iimage-mode" "org-export-dispatch" "replace-string" "comint-dynamic-complete" "customize-option" "helm-find-files" "op/do-publication-and-preview-site" "op/new-post" "op/new-repository" "html-mode" "customize-variable" "server-start" "helm-M-x" "emacs-lisp-mode" "company-mode" "text-mode" "c++-mode" "python-mode" "list-packages" "shell-mode" "load-theme" "package-list-packages-no-fetch" "org-babel-load-file" "org-babel-load-file" "package-show-package-list" "load-theme" "list-packages" "list-packages" "load-theme" "list-packages" "outline-mode" "load-theme" "evil-complete-next" "evil-Surround-edit" "evil-window-vsplit" "evil-split-buffer" "load-theme" "evil-mode" "global-hl-line-mode" "load-theme" "list-packages" "highlight-changes-mode" "load-theme"))
(setq search-ring '("类似" "翻译" "chinese" "org-page" "org-pack" "org-page" "org-pagei" "company-mode" "powerlin" "powerline" "or" "article" "jazz" "helm" "tabs" "highlight-curre"))
(setq regexp-search-ring '("paddle_co" "mt.org" "Recurrent" "Gra" "<2" "<1" "类似" "default" "defa" "theme" "metro" "sty" "ri" "分别" "width" "rnn1"))
